name: Build & Deploy CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.17.0]

    steps:
    - uses: actions/checkout@v4

    - name: Inject .env for docker-compose
      run: |
        touch .env
        echo HOST=${{secrets.HOST}} >> .env
        echo DOMAIN=${{secrets.DOMAIN}} >> .env
        echo PORT=${{secrets.PORT}} >> .env
        echo NODE_ENV=${{secrets.NODE_ENV}} >> .env
        echo STRAPI_TELEMETRY_DISABLED=true >> .env
        echo APP_KEYS=${{secrets.APP_KEYS}} >> .env
        echo API_TOKEN_SALT=${{secrets.API_TOKEN_SALT}} >> .env
        echo ADMIN_JWT_SECRET=${{secrets.ADMIN_JWT_SECRET}} >> .env
        echo TRANSFER_TOKEN_SALT=${{secrets.TRANSFER_TOKEN_SALT}} >> .env
        echo DATABASE_HOST=${{secrets.DATABASE_HOST}} >> .env
        echo DATABASE_PORT=${{secrets.DATABASE_PORT}} >> .env
        echo DATABASE_NAME=${{secrets.DATABASE_NAME}} >> .env
        echo DATABASE_USERNAME=${{secrets.DATABASE_USERNAME}} >> .env
        echo DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}} >> .env
        echo DATABASE_CLIENT=${{secrets.DATABASE_CLIENT}} >> .env
        echo MYSQL_USER=${{secrets.MYSQL_USER}} >> .env
        echo MYSQL_ROOT_PASSWORD=${{secrets.MYSQL_ROOT_PASSWORD}} >> .env
        echo MYSQL_PASSWORD=${{secrets.MYSQL_PASSWORD}} >> .env
        echo MYSQL_DATABASE=${{secrets.MYSQL_DATABASE}} >> .env
        echo MYSQL_ROOT_HOST=${{secrets.MYSQL_ROOT_HOST}} >> .env

    - name: Run docker-compose
      run: |
        sudo docker compose down
        sudo docker compose up -d
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: frontend

    - name: Inject .env into frontend
      run: |
        touch .env
        echo NEXT_PUBLIC_DOMAIN=${{secrets.DOMAIN}} >> .env
      working-directory: frontend
      
    - name: Build project
      run: npm run build --if-present
      working-directory: frontend

    - name: Change directory to PM2 process
      run: cd /home/ubuntu/actions-runner/_work/Strapex/Strapex/frontend

    - name: Restart PM2 process
      run: pm2 restart 0
